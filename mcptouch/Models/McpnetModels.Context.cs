//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mcptouch.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class mcpnetEntities_dev : DbContext
    {
        public mcpnetEntities_dev()
            : base("name=mcpnetEntities_dev")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Alert> Alerts { get; set; }
        public DbSet<ArticleCategory> ArticleCategories { get; set; }
        public DbSet<Article> Articles { get; set; }
        public DbSet<ArticleStatu> ArticleStatus { get; set; }
        public DbSet<Car> Cars { get; set; }
        public DbSet<DateInterval> DateIntervals { get; set; }
        public DbSet<Fuel> Fuels { get; set; }
        public DbSet<Guestbook> Guestbooks { get; set; }
        public DbSet<IssueItem> IssueItems { get; set; }
        public DbSet<Issue> Issues { get; set; }
        public DbSet<Job> Jobs { get; set; }
        public DbSet<LoginHistory> LoginHistories { get; set; }
        public DbSet<Maintenance> Maintenances { get; set; }
        public DbSet<Note> Notes { get; set; }
        public DbSet<OdometerHistory> OdometerHistories { get; set; }
        public DbSet<ProjectItem> ProjectItems { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<ShoppingList> ShoppingLists { get; set; }
        public DbSet<UsernameQuery> UsernameQueries { get; set; }
        public DbSet<User> Users { get; set; }
    
        public virtual int uspActivateAccount(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspActivateAccount", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspAddJobAndMaintenance(Nullable<int> carID, string jobDescr, Nullable<int> mileageInterval, string dateInterval, Nullable<int> mileage, Nullable<System.DateTime> date, Nullable<decimal> cost, string comments)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var jobDescrParameter = jobDescr != null ?
                new ObjectParameter("JobDescr", jobDescr) :
                new ObjectParameter("JobDescr", typeof(string));
    
            var mileageIntervalParameter = mileageInterval.HasValue ?
                new ObjectParameter("MileageInterval", mileageInterval) :
                new ObjectParameter("MileageInterval", typeof(int));
    
            var dateIntervalParameter = dateInterval != null ?
                new ObjectParameter("DateInterval", dateInterval) :
                new ObjectParameter("DateInterval", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspAddJobAndMaintenance", carIDParameter, jobDescrParameter, mileageIntervalParameter, dateIntervalParameter, mileageParameter, dateParameter, costParameter, commentsParameter);
        }
    
        public virtual int uspAddNote(Nullable<int> carID, string noteTitle, string noteText)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var noteTitleParameter = noteTitle != null ?
                new ObjectParameter("NoteTitle", noteTitle) :
                new ObjectParameter("NoteTitle", typeof(string));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddNote", carIDParameter, noteTitleParameter, noteTextParameter);
        }
    
        public virtual int uspAuthenticateNewUser(ObjectParameter userID, string username, string firstName, string lastName, string email, string password, string referral, string initialIP)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var referralParameter = referral != null ?
                new ObjectParameter("Referral", referral) :
                new ObjectParameter("Referral", typeof(string));
    
            var initialIPParameter = initialIP != null ?
                new ObjectParameter("InitialIP", initialIP) :
                new ObjectParameter("InitialIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAuthenticateNewUser", userID, usernameParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, referralParameter, initialIPParameter);
        }
    
        public virtual int uspAuthenticateUser(string userName, string password, ObjectParameter userID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAuthenticateUser", userNameParameter, passwordParameter, userID);
        }
    
        public virtual int uspChangeUserPassword(Nullable<int> userID, string oldPassword, string newPassword, ObjectParameter changed)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspChangeUserPassword", userIDParameter, oldPasswordParameter, newPasswordParameter, changed);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckForDailyEmail(Nullable<System.DateTime> today)
        {
            var todayParameter = today.HasValue ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckForDailyEmail", todayParameter);
        }
    
        public virtual int uspCheckUsername(string username, ObjectParameter available)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckUsername", usernameParameter, available);
        }
    
        public virtual int uspCreateCar(Nullable<int> userID, string nickname, string year, string make, string model, string trim, Nullable<double> milesPerYear, Nullable<double> currentMiles, string comments, ObjectParameter carID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var trimParameter = trim != null ?
                new ObjectParameter("Trim", trim) :
                new ObjectParameter("Trim", typeof(string));
    
            var milesPerYearParameter = milesPerYear.HasValue ?
                new ObjectParameter("MilesPerYear", milesPerYear) :
                new ObjectParameter("MilesPerYear", typeof(double));
    
            var currentMilesParameter = currentMiles.HasValue ?
                new ObjectParameter("CurrentMiles", currentMiles) :
                new ObjectParameter("CurrentMiles", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateCar", userIDParameter, nicknameParameter, yearParameter, makeParameter, modelParameter, trimParameter, milesPerYearParameter, currentMilesParameter, commentsParameter, carID);
        }
    
        public virtual int uspCreateJob(Nullable<int> carID, string jobDescr, Nullable<int> mileageInterval, string dateInterval)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var jobDescrParameter = jobDescr != null ?
                new ObjectParameter("JobDescr", jobDescr) :
                new ObjectParameter("JobDescr", typeof(string));
    
            var mileageIntervalParameter = mileageInterval.HasValue ?
                new ObjectParameter("MileageInterval", mileageInterval) :
                new ObjectParameter("MileageInterval", typeof(int));
    
            var dateIntervalParameter = dateInterval != null ?
                new ObjectParameter("DateInterval", dateInterval) :
                new ObjectParameter("DateInterval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateJob", carIDParameter, jobDescrParameter, mileageIntervalParameter, dateIntervalParameter);
        }
    
        public virtual int uspDeleteCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteCar", carIDParameter);
        }
    
        public virtual int uspDeleteFuel(Nullable<int> fuelID)
        {
            var fuelIDParameter = fuelID.HasValue ?
                new ObjectParameter("FuelID", fuelID) :
                new ObjectParameter("FuelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteFuel", fuelIDParameter);
        }
    
        public virtual int uspDeleteJob(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteJob", jobIDParameter);
        }
    
        public virtual int uspDeleteMaintenance(Nullable<int> maintenanceID)
        {
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("MaintenanceID", maintenanceID) :
                new ObjectParameter("MaintenanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteMaintenance", maintenanceIDParameter);
        }
    
        public virtual int uspDeleteNote(Nullable<int> userID, Nullable<int> carID, Nullable<int> noteID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteNote", userIDParameter, carIDParameter, noteIDParameter);
        }
    
        public virtual int uspDeleteProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteProject", projectIDParameter);
        }
    
        public virtual int uspDeleteProjectItem(Nullable<int> projectItemID)
        {
            var projectItemIDParameter = projectItemID.HasValue ?
                new ObjectParameter("ProjectItemID", projectItemID) :
                new ObjectParameter("ProjectItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteProjectItem", projectItemIDParameter);
        }
    
        public virtual ObjectResult<uspGetAllCars_Result> uspGetAllCars()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllCars_Result>("uspGetAllCars");
        }
    
        public virtual ObjectResult<uspGetAllMPGLogs_Result> uspGetAllMPGLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllMPGLogs_Result>("uspGetAllMPGLogs");
        }
    
        public virtual ObjectResult<uspGetArticle_Result> uspGetArticle(Nullable<int> articleID)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetArticle_Result>("uspGetArticle", articleIDParameter);
        }
    
        public virtual ObjectResult<uspGetArticleCategories_Result> uspGetArticleCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetArticleCategories_Result>("uspGetArticleCategories");
        }
    
        public virtual ObjectResult<uspGetArticlesForUser_Result> uspGetArticlesForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetArticlesForUser_Result>("uspGetArticlesForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetCarDetails_Result> uspGetCarDetails(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCarDetails_Result>("uspGetCarDetails", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetCarHealth_Result> uspGetCarHealth(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCarHealth_Result>("uspGetCarHealth", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetCarsForUser_Result> uspGetCarsForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCarsForUser_Result>("uspGetCarsForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetCarsForUserDetails_Result> uspGetCarsForUserDetails(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCarsForUserDetails_Result>("uspGetCarsForUserDetails", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetDateIntervals_Result> uspGetDateIntervals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDateIntervals_Result>("uspGetDateIntervals");
        }
    
        public virtual ObjectResult<uspGetFuelForCar_Result> uspGetFuelForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetFuelForCar_Result>("uspGetFuelForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetGarageSearch_Result> uspGetGarageSearch(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetGarageSearch_Result>("uspGetGarageSearch", searchTermParameter);
        }
    
        public virtual ObjectResult<uspGetGuestbookForCar_Result> uspGetGuestbookForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetGuestbookForCar_Result>("uspGetGuestbookForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetJobDetails_Result> uspGetJobDetails(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetJobDetails_Result>("uspGetJobDetails", jobIDParameter);
        }
    
        public virtual ObjectResult<uspGetJobsForCar_Result> uspGetJobsForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetJobsForCar_Result>("uspGetJobsForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetJobsForCarDetails_Result> uspGetJobsForCarDetails(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetJobsForCarDetails_Result>("uspGetJobsForCarDetails", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetJobsForCarDetails2_Result> uspGetJobsForCarDetails2(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetJobsForCarDetails2_Result>("uspGetJobsForCarDetails2", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetMaintenanceAlertsAll_Result> uspGetMaintenanceAlertsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMaintenanceAlertsAll_Result>("uspGetMaintenanceAlertsAll");
        }
    
        public virtual ObjectResult<uspGetMaintenanceAlertsForUser_Result> uspGetMaintenanceAlertsForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMaintenanceAlertsForUser_Result>("uspGetMaintenanceAlertsForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetMaintenanceAlertsForUserBeta_Result> uspGetMaintenanceAlertsForUserBeta(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMaintenanceAlertsForUserBeta_Result>("uspGetMaintenanceAlertsForUserBeta", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> uspGetMaintenanceForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uspGetMaintenanceForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetMaintenanceForCarNewest_Result> uspGetMaintenanceForCarNewest(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMaintenanceForCarNewest_Result>("uspGetMaintenanceForCarNewest", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetMileagePerYearForCar_Result> uspGetMileagePerYearForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMileagePerYearForCar_Result>("uspGetMileagePerYearForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetNotesForCar_Result> uspGetNotesForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetNotesForCar_Result>("uspGetNotesForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetNotesForUser_Result> uspGetNotesForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetNotesForUser_Result>("uspGetNotesForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetOverdueItemsForUser_Result> uspGetOverdueItemsForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetOverdueItemsForUser_Result>("uspGetOverdueItemsForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetProjectAlertsForUser_Result> uspGetProjectAlertsForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProjectAlertsForUser_Result>("uspGetProjectAlertsForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetProjectDetails_Result> uspGetProjectDetails(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProjectDetails_Result>("uspGetProjectDetails", projectIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> uspGetProjectedMiles(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("uspGetProjectedMiles", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetProjectItems_Result> uspGetProjectItems(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProjectItems_Result>("uspGetProjectItems", projectIDParameter);
        }
    
        public virtual ObjectResult<uspGetProjectItemsForSharing_Result> uspGetProjectItemsForSharing(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProjectItemsForSharing_Result>("uspGetProjectItemsForSharing", projectIDParameter);
        }
    
        public virtual ObjectResult<uspGetProjectsForCar_Result> uspGetProjectsForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProjectsForCar_Result>("uspGetProjectsForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetProjectsForSharing_Result> uspGetProjectsForSharing(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProjectsForSharing_Result>("uspGetProjectsForSharing", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetPublicLogs_Result> uspGetPublicLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPublicLogs_Result>("uspGetPublicLogs");
        }
    
        public virtual ObjectResult<uspGetPublishedArticles_Result> uspGetPublishedArticles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPublishedArticles_Result>("uspGetPublishedArticles");
        }
    
        public virtual ObjectResult<uspGetReportsForCar_Result> uspGetReportsForCar(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReportsForCar_Result>("uspGetReportsForCar", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetReportsForCarNew_Result> uspGetReportsForCarNew(Nullable<int> carID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReportsForCarNew_Result>("uspGetReportsForCarNew", carIDParameter);
        }
    
        public virtual ObjectResult<uspGetUpcomingItemsForUser_Result> uspGetUpcomingItemsForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUpcomingItemsForUser_Result>("uspGetUpcomingItemsForUser", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserHomePage_Result> uspGetUserHomePage(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserHomePage_Result>("uspGetUserHomePage", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserInfo_Result> uspGetUserInfo(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserInfo_Result>("uspGetUserInfo", userIDParameter);
        }
    
        public virtual ObjectResult<string> uspGetUsernameFromEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetUsernameFromEmail", emailParameter);
        }
    
        public virtual int uspIgnoreMaintenanceOverdue(Nullable<int> maintenanceID)
        {
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("MaintenanceID", maintenanceID) :
                new ObjectParameter("MaintenanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIgnoreMaintenanceOverdue", maintenanceIDParameter);
        }
    
        public virtual int uspIgnoreMaintenanceWarning(Nullable<int> maintenanceID)
        {
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("MaintenanceID", maintenanceID) :
                new ObjectParameter("MaintenanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIgnoreMaintenanceWarning", maintenanceIDParameter);
        }
    
        public virtual int uspInsertArticle(Nullable<int> userID, string articleName, string articleText, Nullable<int> articleCategoryID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var articleNameParameter = articleName != null ?
                new ObjectParameter("ArticleName", articleName) :
                new ObjectParameter("ArticleName", typeof(string));
    
            var articleTextParameter = articleText != null ?
                new ObjectParameter("ArticleText", articleText) :
                new ObjectParameter("ArticleText", typeof(string));
    
            var articleCategoryIDParameter = articleCategoryID.HasValue ?
                new ObjectParameter("ArticleCategoryID", articleCategoryID) :
                new ObjectParameter("ArticleCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertArticle", userIDParameter, articleNameParameter, articleTextParameter, articleCategoryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspInsertFuel(Nullable<int> carID, Nullable<System.DateTime> date, Nullable<double> beginOdo, Nullable<double> endOdo, Nullable<double> miles, Nullable<double> gallons, Nullable<decimal> cost, string comments)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var beginOdoParameter = beginOdo.HasValue ?
                new ObjectParameter("BeginOdo", beginOdo) :
                new ObjectParameter("BeginOdo", typeof(double));
    
            var endOdoParameter = endOdo.HasValue ?
                new ObjectParameter("EndOdo", endOdo) :
                new ObjectParameter("EndOdo", typeof(double));
    
            var milesParameter = miles.HasValue ?
                new ObjectParameter("Miles", miles) :
                new ObjectParameter("Miles", typeof(double));
    
            var gallonsParameter = gallons.HasValue ?
                new ObjectParameter("Gallons", gallons) :
                new ObjectParameter("Gallons", typeof(double));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspInsertFuel", carIDParameter, dateParameter, beginOdoParameter, endOdoParameter, milesParameter, gallonsParameter, costParameter, commentsParameter);
        }
    
        public virtual int uspInsertGuestbookEntry(Nullable<int> carID, Nullable<int> userID, string comments)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertGuestbookEntry", carIDParameter, userIDParameter, commentsParameter);
        }
    
        public virtual int uspInsertLoginHistory(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertLoginHistory", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspInsertMaintenance(Nullable<int> carID, Nullable<int> jobID, Nullable<int> mileage, Nullable<System.DateTime> date, Nullable<decimal> cost, string comments)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspInsertMaintenance", carIDParameter, jobIDParameter, mileageParameter, dateParameter, costParameter, commentsParameter);
        }
    
        public virtual int uspInsertOdometerHistory(Nullable<int> carID, Nullable<double> miles, Nullable<System.DateTime> date)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var milesParameter = miles.HasValue ?
                new ObjectParameter("Miles", miles) :
                new ObjectParameter("Miles", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertOdometerHistory", carIDParameter, milesParameter, dateParameter);
        }
    
        public virtual int uspInsertProject(Nullable<int> carID, string projectName, string projectDescr, Nullable<System.DateTime> startDate, Nullable<System.DateTime> dueDate, Nullable<decimal> budget, ObjectParameter projectID)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectDescrParameter = projectDescr != null ?
                new ObjectParameter("ProjectDescr", projectDescr) :
                new ObjectParameter("ProjectDescr", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertProject", carIDParameter, projectNameParameter, projectDescrParameter, startDateParameter, dueDateParameter, budgetParameter, projectID);
        }
    
        public virtual int uspInsertProjectItem(Nullable<int> projectID, Nullable<int> carID, string projectItemName, string projectItemDescr, string vendor, string partNumber, string link, Nullable<decimal> price, Nullable<bool> purchased, Nullable<System.DateTime> purchaseDate, Nullable<bool> installed, Nullable<System.DateTime> installDate, Nullable<bool> shared, ObjectParameter projectItemID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var projectItemNameParameter = projectItemName != null ?
                new ObjectParameter("ProjectItemName", projectItemName) :
                new ObjectParameter("ProjectItemName", typeof(string));
    
            var projectItemDescrParameter = projectItemDescr != null ?
                new ObjectParameter("ProjectItemDescr", projectItemDescr) :
                new ObjectParameter("ProjectItemDescr", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var purchasedParameter = purchased.HasValue ?
                new ObjectParameter("Purchased", purchased) :
                new ObjectParameter("Purchased", typeof(bool));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var installedParameter = installed.HasValue ?
                new ObjectParameter("Installed", installed) :
                new ObjectParameter("Installed", typeof(bool));
    
            var installDateParameter = installDate.HasValue ?
                new ObjectParameter("InstallDate", installDate) :
                new ObjectParameter("InstallDate", typeof(System.DateTime));
    
            var sharedParameter = shared.HasValue ?
                new ObjectParameter("Shared", shared) :
                new ObjectParameter("Shared", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertProjectItem", projectIDParameter, carIDParameter, projectItemNameParameter, projectItemDescrParameter, vendorParameter, partNumberParameter, linkParameter, priceParameter, purchasedParameter, purchaseDateParameter, installedParameter, installDateParameter, sharedParameter, projectItemID);
        }
    
        public virtual int uspInsertUsernameQuery(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUsernameQuery", usernameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspIsCarOwner(Nullable<int> userID, Nullable<int> carID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspIsCarOwner", userIDParameter, carIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspIsFuelOwner(Nullable<int> userID, Nullable<int> fuelID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fuelIDParameter = fuelID.HasValue ?
                new ObjectParameter("FuelID", fuelID) :
                new ObjectParameter("FuelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspIsFuelOwner", userIDParameter, fuelIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspIsJobOwner(Nullable<int> userID, Nullable<int> jobID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspIsJobOwner", userIDParameter, jobIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspIsMaintenanceOwner(Nullable<int> userID, Nullable<int> maintenanceID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("MaintenanceID", maintenanceID) :
                new ObjectParameter("MaintenanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspIsMaintenanceOwner", userIDParameter, maintenanceIDParameter);
        }
    
        public virtual int uspResetPassword(Nullable<int> userID, string newEncPassword)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var newEncPasswordParameter = newEncPassword != null ?
                new ObjectParameter("NewEncPassword", newEncPassword) :
                new ObjectParameter("NewEncPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspResetPassword", userIDParameter, newEncPasswordParameter);
        }
    
        public virtual int uspSaveCar(Nullable<int> carID, string nickname, string year, string make, string model, string trim, Nullable<double> milesPerYear, string comments)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var trimParameter = trim != null ?
                new ObjectParameter("Trim", trim) :
                new ObjectParameter("Trim", typeof(string));
    
            var milesPerYearParameter = milesPerYear.HasValue ?
                new ObjectParameter("MilesPerYear", milesPerYear) :
                new ObjectParameter("MilesPerYear", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveCar", carIDParameter, nicknameParameter, yearParameter, makeParameter, modelParameter, trimParameter, milesPerYearParameter, commentsParameter);
        }
    
        public virtual int uspSaveJob(Nullable<int> jobID, string jobDescr, Nullable<int> mileageInterval, Nullable<int> dateInterval)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var jobDescrParameter = jobDescr != null ?
                new ObjectParameter("JobDescr", jobDescr) :
                new ObjectParameter("JobDescr", typeof(string));
    
            var mileageIntervalParameter = mileageInterval.HasValue ?
                new ObjectParameter("MileageInterval", mileageInterval) :
                new ObjectParameter("MileageInterval", typeof(int));
    
            var dateIntervalParameter = dateInterval.HasValue ?
                new ObjectParameter("DateInterval", dateInterval) :
                new ObjectParameter("DateInterval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveJob", jobIDParameter, jobDescrParameter, mileageIntervalParameter, dateIntervalParameter);
        }
    
        public virtual int uspSetCarPublicStatus(Nullable<int> carID, Nullable<bool> isPublic)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetCarPublicStatus", carIDParameter, isPublicParameter);
        }
    
        public virtual int uspUpdateCurrentMiles(Nullable<int> carID, Nullable<double> miles, Nullable<System.DateTime> date)
        {
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var milesParameter = miles.HasValue ?
                new ObjectParameter("Miles", miles) :
                new ObjectParameter("Miles", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateCurrentMiles", carIDParameter, milesParameter, dateParameter);
        }
    
        public virtual int uspUpdateDailyEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDailyEmail");
        }
    
        public virtual int uspUpdateFuel(Nullable<int> fuelID, Nullable<System.DateTime> date, Nullable<double> bOdo, Nullable<double> eOdo, Nullable<double> miles, Nullable<double> gallons, Nullable<decimal> moneySpent, string comments)
        {
            var fuelIDParameter = fuelID.HasValue ?
                new ObjectParameter("FuelID", fuelID) :
                new ObjectParameter("FuelID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bOdoParameter = bOdo.HasValue ?
                new ObjectParameter("BOdo", bOdo) :
                new ObjectParameter("BOdo", typeof(double));
    
            var eOdoParameter = eOdo.HasValue ?
                new ObjectParameter("EOdo", eOdo) :
                new ObjectParameter("EOdo", typeof(double));
    
            var milesParameter = miles.HasValue ?
                new ObjectParameter("Miles", miles) :
                new ObjectParameter("Miles", typeof(double));
    
            var gallonsParameter = gallons.HasValue ?
                new ObjectParameter("Gallons", gallons) :
                new ObjectParameter("Gallons", typeof(double));
    
            var moneySpentParameter = moneySpent.HasValue ?
                new ObjectParameter("MoneySpent", moneySpent) :
                new ObjectParameter("MoneySpent", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateFuel", fuelIDParameter, dateParameter, bOdoParameter, eOdoParameter, milesParameter, gallonsParameter, moneySpentParameter, commentsParameter);
        }
    
        public virtual int uspUpdateMaintenance(Nullable<int> maintenanceID, Nullable<int> jobID, Nullable<int> mileage, Nullable<System.DateTime> date, Nullable<decimal> cost, string comments)
        {
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("MaintenanceID", maintenanceID) :
                new ObjectParameter("MaintenanceID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMaintenance", maintenanceIDParameter, jobIDParameter, mileageParameter, dateParameter, costParameter, commentsParameter);
        }
    
        public virtual int uspUpdateMaintenanceAlertSent(Nullable<int> maintenanceID, string alertType)
        {
            var maintenanceIDParameter = maintenanceID.HasValue ?
                new ObjectParameter("MaintenanceID", maintenanceID) :
                new ObjectParameter("MaintenanceID", typeof(int));
    
            var alertTypeParameter = alertType != null ?
                new ObjectParameter("AlertType", alertType) :
                new ObjectParameter("AlertType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMaintenanceAlertSent", maintenanceIDParameter, alertTypeParameter);
        }
    
        public virtual int uspUpdateNote(Nullable<int> userID, Nullable<int> carID, Nullable<int> noteID, string noteTitle, string noteText)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var noteTitleParameter = noteTitle != null ?
                new ObjectParameter("NoteTitle", noteTitle) :
                new ObjectParameter("NoteTitle", typeof(string));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateNote", userIDParameter, carIDParameter, noteIDParameter, noteTitleParameter, noteTextParameter);
        }
    
        public virtual int uspUpdateProject(Nullable<int> projectID, string projectName, string projectDescr, Nullable<System.DateTime> startDate, Nullable<System.DateTime> dueDate, Nullable<decimal> budget, Nullable<bool> completed, Nullable<System.DateTime> completionDate)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectDescrParameter = projectDescr != null ?
                new ObjectParameter("ProjectDescr", projectDescr) :
                new ObjectParameter("ProjectDescr", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateProject", projectIDParameter, projectNameParameter, projectDescrParameter, startDateParameter, dueDateParameter, budgetParameter, completedParameter, completionDateParameter);
        }
    
        public virtual int uspUpdateProjectItem(Nullable<int> projectItemID, string projectItemName, string vendor, string partNumber, string link, Nullable<decimal> price, Nullable<bool> purchased, Nullable<bool> shared)
        {
            var projectItemIDParameter = projectItemID.HasValue ?
                new ObjectParameter("ProjectItemID", projectItemID) :
                new ObjectParameter("ProjectItemID", typeof(int));
    
            var projectItemNameParameter = projectItemName != null ?
                new ObjectParameter("ProjectItemName", projectItemName) :
                new ObjectParameter("ProjectItemName", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var purchasedParameter = purchased.HasValue ?
                new ObjectParameter("Purchased", purchased) :
                new ObjectParameter("Purchased", typeof(bool));
    
            var sharedParameter = shared.HasValue ?
                new ObjectParameter("Shared", shared) :
                new ObjectParameter("Shared", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateProjectItem", projectItemIDParameter, projectItemNameParameter, vendorParameter, partNumberParameter, linkParameter, priceParameter, purchasedParameter, sharedParameter);
        }
    
        public virtual int uspUpdateUser(Nullable<int> userID, string firstName, string lastName, string email)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUser", userIDParameter, firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspVerifyUserInfo(string username, string firstName, string email)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspVerifyUserInfo", usernameParameter, firstNameParameter, emailParameter);
        }
    }
}
